import os
import shutil
import logging
from logging.handlers import RotatingFileHandler
from pathlib import Path
from dotenv import load_dotenv
import re

# --- –ü—É—Ç—å –∫ .env —Ä—è–¥–æ–º —Å —ç—Ç–∏–º —Ñ–∞–π–ª–æ–º ---
BASE_DIR = Path(__file__).resolve().parent
DOTENV_PATH = BASE_DIR / ".env"

# --- –ì—Ä—É–∑–∏–º .env –∏–∑ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏ ---
load_dotenv(dotenv_path=DOTENV_PATH)

# --- –õ–æ–≥–∏ ---
LOG_DIR = str(BASE_DIR / "logs")

def setup_logging():
    """
    –û—á–∏—â–∞–µ—Ç –ø–∞–ø–∫—É logs –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
    –õ–∏–º–∏—Ç —Ñ–∞–π–ª–∞ 10 –ú–ë, –±–µ–∑ –±—ç–∫–∞–ø–æ–≤.
    """
    if os.path.exists(LOG_DIR):
        shutil.rmtree(LOG_DIR)
    os.makedirs(LOG_DIR, exist_ok=True)

    file_handler = RotatingFileHandler(
        filename=os.path.join(LOG_DIR, "bot.log"),
        maxBytes=10 * 1024 * 1024,
        backupCount=0
    )
    formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(name)s: %(message)s")
    file_handler.setFormatter(formatter)

    root = logging.getLogger()
    root.setLevel(logging.INFO)
    if root.hasHandlers():
        root.handlers.clear()
    root.addHandler(file_handler)
    root.addHandler(logging.StreamHandler())

    logging.info("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")

# --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "")

POSTGRES_USER = os.getenv("POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.getenv("POSTGRES_PASSWORD", "admin")
POSTGRES_DB = os.getenv("POSTGRES_DB", "assistant_bot")
POSTGRES_HOST = os.getenv("POSTGRES_HOST", "127.0.0.1")
POSTGRES_PORT = os.getenv("POSTGRES_PORT", "5433")

DATABASE_URL = (
    f"postgresql+asyncpg://{POSTGRES_USER}:{POSTGRES_PASSWORD}@"
    f"{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"
)

# --- –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞ (–∫–∞–∫ —É BotFather: digits:Base64-like) ---
_TOKEN_RE = re.compile(r"^\d{6,12}:[A-Za-z0-9_-]{20,}$")

def validate_bot_token_or_raise(token: str) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ —Ç–æ–∫–µ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–π Telegram Bot API —Ç–æ–∫–µ–Ω.
    –ë—Ä–æ—Å–∞–µ—Ç ValueError —Å –ø–æ–Ω—è—Ç–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—É—Å—Ç–æ–π –∏–ª–∏ –∫—Ä–∏–≤–æ–π.
    """
    if not token:
        raise ValueError(
            "BOT_TOKEN –ø—É—Å—Ç. –ü—Ä–æ–≤–µ—Ä—å .env (–∫–ª—é—á BOT_TOKEN=...) –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è."
        )
    if not _TOKEN_RE.match(token.strip()):
        # –ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö
        masked = token[:6] + "..." if len(token) >= 6 else "***"
        raise ValueError(
            f"BOT_TOKEN –≤—ã–≥–ª—è–¥–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: '{masked}'. "
            "–°–∫–æ–ø–∏—Ä—É–π —Ç–æ–∫–µ–Ω –∑–∞–Ω–æ–≤–æ –∏–∑ @BotFather –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–∞–≤—ã—á–µ–∫."
        )
