import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.reply import BTN_ADD_TASK, BTN_VIEW_TASKS
from states.task_states import TaskAddState

from sqlalchemy import select, delete
from database.db import async_session
from database.models import User, Task

router = Router()
logger = logging.getLogger(__name__)

# === –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ===

@router.message(Command("add_task"))
@router.message(F.text == BTN_ADD_TASK)
async def add_task_start(message: Message, state: FSMContext) -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –º–∞—Å—Ç–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏.
    –ü—Ä–æ—Å–∏–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.
    """
    await state.set_state(TaskAddState.waiting_for_title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ö–ü):")


@router.message(TaskAddState.waiting_for_title, F.text.len() > 0)
async def add_task_get_title(message: Message, state: FSMContext) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø—Ä–æ—Å–∏–º –≤—Ä–µ–º—è.
    """
    await state.update_data(title=message.text.strip())
    await state.set_state(TaskAddState.waiting_for_time)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):")


@router.message(TaskAddState.waiting_for_time, F.text.len() > 0)
async def add_task_save(message: Message, state: FSMContext) -> None:
    """
    –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç) –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î.
    """
    time_text = message.text.strip()
    data = await state.get_data()
    title = data.get("title")

    if len(time_text) > 50:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –£–∫–∞–∂–∏—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00")
        return

    tg_user = message.from_user

    async with async_session() as session:
        # –Ω–∞—Ö–æ–¥–∏–º/—Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.tg_id == tg_user.id)
        )
        user = result.scalar_one_or_none()
        if user is None:
            user = User(tg_id=tg_user.id, username=tg_user.username or "")
            session.add(user)
            await session.flush()

        # —Å–æ–∑–¥–∞—ë–º –∑–∞–¥–∞—á—É
        task = Task(user_id=user.id, title=title, time=time_text, status="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
        session.add(task)
        await session.commit()

    await state.clear()
    await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:\n‚Ä¢ {title}\n‚Ä¢ –í—Ä–µ–º—è: {time_text}")
    logger.info("Task created for user %s: %s at %s", tg_user.id, title, time_text)


@router.message(Command("cancel"))
async def cancel(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ –º–∞—Å—Ç–µ—Ä–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏. –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


# --- NEW CODE START: –ø—Ä–æ—Å–º–æ—Ç—Ä –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á ---

@router.message(F.text == BTN_VIEW_TASKS)
@router.message(Command("view_tasks"))
async def view_tasks(message: Message):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á.
    –ù–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏, –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ ‚Äî –≤–Ω–∏–∑—É —Å–ø–∏—Å–∫–∞.
    """
    tg_user = message.from_user

    async with async_session() as session:
        result = await session.execute(
            select(Task).join(User).where(User.tg_id == tg_user.id)
        )
        tasks = result.scalars().all()

    if not tasks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.")
        return

    # --- NEW CODE START: —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ ---
    tasks.sort(key=lambda t: 0 if t.status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" else 1)
    # --- NEW CODE END ---

    text = "üìã <b>–í–∞—à–∏ –∑–∞–¥–∞—á–∏:</b>\n\n"
    builder = InlineKeyboardBuilder()

    for task in tasks:
        text += f"‚Ä¢ <b>{task.title}</b> ‚Äî {task.time} [{task.status}]\n"
        builder.button(text=f"‚úÖ {task.id}", callback_data=f"task_done:{task.id}")
        builder.button(text=f"üóë {task.id}", callback_data=f"task_del:{task.id}")

    builder.adjust(2)
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode="HTML")

# --- NEW CODE END ---


@router.callback_query(F.data.startswith("task_done:"))
async def mark_task_done(callback: CallbackQuery):
    """
    –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏: –í—ã–ø–æ–ª–Ω–µ–Ω–∞ <-> –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.
    """
    task_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        result = await session.execute(select(Task).where(Task.id == task_id))
        task = result.scalar_one_or_none()
        if task:
            task.status = "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" if task.status != "–í—ã–ø–æ–ª–Ω–µ–Ω–∞" else "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞"
            await session.commit()
            await callback.answer(f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ ¬´{task.status}¬ª ‚úÖ")
        else:
            await callback.answer("–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ ‚ùå", show_alert=True)


@router.callback_query(F.data.startswith("task_del:"))
async def delete_task(callback: CallbackQuery):
    """
    –£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    task_id = int(callback.data.split(":")[1])
    async with async_session() as session:
        await session.execute(delete(Task).where(Task.id == task_id))
        await session.commit()
    await callback.answer("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞ üóë")
    await callback.message.edit_text("–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞. –û–±–Ω–æ–≤–∏—Ç–µ —Å–ø–∏—Å–æ–∫ üìã")
